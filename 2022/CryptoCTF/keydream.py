from sage.all import * 
from Crypto.Util.number import long_to_bytes, bytes_to_long, isPrime, inverse, getPrime
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from pwn import * 
import random as rand
from tqdm import tqdm
import requests
import json
from base64 import b64encode

n = 23087202318856030774680571525957068827041569782431397956837104908189620961469336659300387982516148407611623358654041246574100274275974799587138270853364165853708786079644741407579091918180874935364024818882648063256767259283714592098555858095373381673229188828791636142379379969143042636324982275996627729079
c = 3621516728616736303019716820373078604485184090642291670706733720518953475684497936351864366709813094154736213978864841551795776449242009307288704109630747654430068522939150168228783644831299534766861590666590062361030323441362406214182358585821009335369275098938212859113101297279381840308568293108965668609

s1 = b'CCTF{it_is_fake_flag_' # 27

s2 = b'_90OD_luCk___!!}'


P = PolynomialRing(Zmod(n), 'x')
x = P.gen()

f = bytes_to_long(s1) * pow(256, len(s2) + 27, n) + x * pow(256, len(s2), n) + bytes_to_long(s2)
f = f.monic()

res = int(f.small_roots(X = 1 << 216, beta = 0.49, eps = 0.025)[0])

p = GCD(int(f(res)), n)
q = n // p 

print(p)
print(q)

phi = (p - 1) * (q - 1)
e = 65537 
d = inverse(e, phi)

print(long_to_bytes(int(pow(c, d, n))))