from sage.all import *
import hashlib 
import random as rand 
from tqdm import tqdm
from Crypto.Util.number import isPrime, inverse, long_to_bytes, bytes_to_long

n1 = 132240475872174910020944408159013384770525986234801028624784519134365862704105251340824787510945183963356820885920367304711310957365047441178683686926111455575911962257698539064559510444855775549001648292058855493337857073693460061212792795075263084221929517773754699732129582794061997056827998985829666251060653380798686353779510948629280009197715644814616657550158740378670095210797455828266323922570838468050733341304227070902756780052159113811360169205531739117518635829837403006788948761106892086004133969899267757339921
n2 = 95063555614573541810575593850289506856925979977609991181205616159125089261546784721154599484613262518469706157215924537125160406418217535531993036958388330505871763176297570429533467696205928686731756713059807727405313286020007347211892135226632724359291407913539632339885950358476265995466145680878334722001
n3 = 59077122528757446350604269162079270359932342538938986760275099248290981958441838384256597839386787448447136083450980256330743221155636885358548541847176342745397373638152767362253944731433134474562146358334422503033973244936835557423934491676324297243326613498319086748647812745223753746779568080090592100960499863677438403657325762852705171109382084916335379889394829715777901290096314487661584614712488781379507151355301063123233880909931925363322846957197537676660047824476129446066149857051131731840540157488590899311381370266592295206055792990886734933291304077440476730373491475852882163732120626849448728573574411786320772125534383707413572678316508826450778346723441956945169297689138799298561759843280317867927205551400065163199599457
n4 = 24589423756497058585126900932611669798817346035509889383925628660158156567930038333401661451846451875869437263666365776498658699865323180836374906288949824205543130261556051807217164348291174483234810669420041361857307271050079366739157441129916338485838528114129985080841445467007786565727910355311119650431197742495274527401569906785121880408809802492383216836691265423297722021017515667257863302820657924121913047547741420413553737917632809270380269758313556777803344394624408862183672919570479289614998783678080936272369083
n5 = 185885020243714550225131939334004568560534422416697599024696590344782893162219788079305752632863387855011040772104676488940707663157284194641170875157382507202789029285286466326803699701161968587945867047101502048926016515139728368809523009828247173096909917611001113266938209226483162533302629909322412013492978440863258135181226831155024690292336026753678424906151360739424148666951389956182136072508650529271179749569637083537783283360860102371562796635391549934474381821125255176073752645643893294533330184238070085333427
e = 65537
c = 44836759088389215801662306050375432910426695023654894661152471598197009644316944364461563733708795401026569460109604554622161444073404474265330567406370705019579756826106816505952084633979876247266812002057927154389274998399825703196810049647324831928277737068842860115202258059693760003397831075633707611377854322143735834890385706873765241863615950449707047454133596389612468366465634011925228326638487664313491916754929381088396403448356901628825906815317934440495749705736715790281606858736722493438754469493049523175471903946974639097168758949520143915621139415847104585816466890751841858540120267543411140490236193353524030168152197407408753865346510476692347085048554088639428645948051171829012753631844379643600528027854258899402371612


def b2l(x):
    return bytes_to_long(str(x).encode())

lef = 0
rig = 1 << 512
best = 0

while lef <= rig:
    mid = (lef + rig) // 2
    if mid * b2l(mid) <= n1:
        best = mid 
        lef = mid + 1 
    else:
        rig = mid - 1

p1 = best 
q1 = b2l(best)

assert isPrime(p1) and isPrime(q1)

def isZero(N, k):
    return N % (1 << k) == 0

def solveDouble1(n2, n3, cand, k):
    if len(cand) == 0:
        return
    print(k, len(cand))
    new_cand = []
    for p2, q2, p3, q3 in cand:
        if p2 >= 2 and n2 % p2 == 0:
            print("FOUND 2")
            print("p2:", p2)
            print("p3:", n2 // p2)
        if p3 >= 2 and n2 % p3 == 0:
            print("FOUND 2")
            print("p2:", n2 // p3)
            print("p3:", p3)
        if q2 >= 2 and n3 % q2 == 0:
            print("FOUND 3")
            print("q2:", q2)
            print("q3:", n3 // q2)
        if q3 >= 2 and n3 % q3 == 0:
            print("FOUND 3")
            print("q2:", n3 // q3)
            print("q3:", q3)
        for i in range(10):
            for j in range(10):
                p2_new = p2 + (i * (10 ** k))
                p3_new = p3 + (j * (10 ** k))
                q2_new = q2 + ((48 + i) * (1 << (8 * k)))
                q3_new = q3 + ((48 + j) * (1 << (8 * k)))
                if isZero(p2_new * p3_new - n2, k + 1) and isZero(q2_new * q3_new - n3, 8 * k + 8):
                    new_cand.append((p2_new, q2_new, p3_new, q3_new))
    solveDouble1(n2, n3, new_cand, k + 1)

# solveDouble1(n2, n3, [(0, 0, 0, 0)], 0)

q2 = 3637614835597688283811417087451284735795723790907404269598102567844323884268458831660382863895122427922344137308051772571787667106920348754312958580649067039352206952350851620944738489878777590555129193542297958160664605061629454033040783847224918471035675969664919877726877869514540502471336353104729922441764993392231792420645815412664583902384583343063457953995717882417
q3 = 16240620626084129569635357960935943759269695390880055174494678796886574808475500548495232716180627242490107847091316139089796101281858955162533734479656410257303886772297342639191292527487307608348085739212472450769943235321492475607992447777362986084331955247963913144876481311298880062786552320641355475076857473420482439273670098547367649970130113697205788874617731121

p2 = 10685750878049478986600454022422733804784834227531623991827538970867377925593354382775253050419846972347584519245766235538419501021140939003899401773087821
p3 = 8896291584885417569104339023688932443326753617531842711599106401724528341937087331194574622599888534531753509912922572906401573640791655490141830263538581

assert q2 == b2l(p2) and q3 == b2l(p3) and n2 == p2 * p3 and n3 == q2 * q3

# q5 = n4 / x
# q4 = n5 / b2l(x)
# n4 / x = b2l(n5 / n2l(x))
# x * n2l(n5 / n2l(x)) = n4

def calc(x, debug = False):
    if debug:
        print(len(str(x)))
        print(len(str(n5 // b2l(x))))
    return x * b2l(n5 // b2l(x))

lef = 1 << 511
rig = 10 ** 154
best = 0

while lef <= rig:
    mid = (lef + rig) // 2
    if calc(mid) <= n4:
        best = mid
        lef = mid + 1
    else:
        rig = mid - 1 

p4 = best 
q5 = n4 // p4
q4 = b2l(p4)
p5 = n5 // q4

assert q4 == b2l(p4) and q5 == b2l(p5) and n4 == p4 * q5 and n5 == p5 * q4 

def decrypt(c, n, p, q):
    phi = (p - 1) * (q - 1)
    d = inverse(65537, phi)
    c = int(pow(c, d, n))
    return c

assert n2 < n1 < n5 < n4 < n3

c = decrypt(c, n3, q2, q3)
c = decrypt(c, n4, p4, q5)
c = decrypt(c, n5, p5, q4)
c = decrypt(c, n1, p1, q1)
c = decrypt(c, n2, p2, p3)

print(long_to_bytes(c))