#include <iostream>
using namespace std;
int pi[9][32] = {
    {0x2, 0x4, 0x3, 0xf, 0x6, 0xa, 0x8, 0x8, 0x8, 0x5, 0xa, 0x3, 0x0, 0x8, 0xd, 0x3,
     0x1, 0x3, 0x1, 0x9, 0x8, 0xa, 0x2, 0xe, 0x0, 0x3, 0x7, 0x0, 0x7, 0x3, 0x4, 0x4},
    {0xa, 0x4, 0x0, 0x9, 0x3, 0x8, 0x2, 0x2, 0x2, 0x9, 0x9, 0xf, 0x3, 0x1, 0xd, 0x0,
     0x0, 0x8, 0x2, 0xe, 0xf, 0xa, 0x9, 0x8, 0xe, 0xc, 0x4, 0xe, 0x6, 0xc, 0x8, 0x9},
    {0x4, 0x5, 0x2, 0x8, 0x2, 0x1, 0xe, 0x6, 0x3, 0x8, 0xd, 0x0, 0x1, 0x3, 0x7, 0x7,
     0xb, 0xe, 0x5, 0x4, 0x6, 0x6, 0xc, 0xf, 0x3, 0x4, 0xe, 0x9, 0x0, 0xc, 0x6, 0xc},
    {0xc, 0x0, 0xa, 0xc, 0x2, 0x9, 0xb, 0x7, 0xc, 0x9, 0x7, 0xc, 0x5, 0x0, 0xd, 0xd,
     0x3, 0xf, 0x8, 0x4, 0xd, 0x5, 0xb, 0x5, 0xb, 0x5, 0x4, 0x7, 0x0, 0x9, 0x1, 0x7},
    {0x9, 0x2, 0x1, 0x6, 0xd, 0x5, 0xd, 0x9, 0x8, 0x9, 0x7, 0x9, 0xf, 0xb, 0x1, 0xb,
     0xd, 0x1, 0x3, 0x1, 0x0, 0xb, 0xa, 0x6, 0x9, 0x8, 0xd, 0xf, 0xb, 0x5, 0xa, 0xc},
    {0x2, 0xf, 0xf, 0xd, 0x7, 0x2, 0xd, 0xb, 0xd, 0x0, 0x1, 0xa, 0xd, 0xf, 0xb, 0x7,
     0xb, 0x8, 0xe, 0x1, 0xa, 0xf, 0xe, 0xd, 0x6, 0xa, 0x2, 0x6, 0x7, 0xe, 0x9, 0x6},
    {0xb, 0xa, 0x7, 0xc, 0x9, 0x0, 0x4, 0x5, 0xf, 0x1, 0x2, 0xc, 0x7, 0xf, 0x9, 0x9,
     0x2, 0x4, 0xa, 0x1, 0x9, 0x9, 0x4, 0x7, 0xb, 0x3, 0x9, 0x1, 0x6, 0xc, 0xf, 0x7},
    {0x0, 0x8, 0x0, 0x1, 0xf, 0x2, 0xe, 0x2, 0x8, 0x5, 0x8, 0xe, 0xf, 0xc, 0x1, 0x6,
     0x6, 0x3, 0x6, 0x9, 0x2, 0x0, 0xd, 0x8, 0x7, 0x1, 0x5, 0x7, 0x4, 0xe, 0x6, 0x9},
    {0xa, 0x4, 0x5, 0x8, 0xf, 0xe, 0xa, 0x3, 0xf, 0x4, 0x9, 0x3, 0x3, 0xd, 0x7, 0xe,
     0x0, 0xd, 0x9, 0x5, 0x7, 0x4, 0x8, 0xf, 0x7, 0x2, 0x8, 0xe, 0xb, 0x6, 0x5, 0x8},
};

int sbox[16] = {12, 5, 6, 11, 9, 0, 10, 13, 3, 14, 15, 8, 4, 7, 1, 2};
unsigned long long int tot = 0;
int part[7];
int KEY[32];
int pos[32][16], sz[32];
int ptxt[32] = {4, 6, 4, 3, 5, 3, 4, 3, 7, 11, 6, 6, 6, 1, 3, 4, 3, 2, 3, 2, 6, 5, 3, 3, 3, 3, 3, 9, 3, 4, 3, 4};
int ctxt[32] = {0, 7, 11, 0, 13, 3, 2, 12, 8, 10, 6, 10, 2, 5, 13, 12, 7, 8, 2, 13, 2, 14, 14, 2, 0, 10, 12, 13, 5, 3, 15, 3};

bool check(void)
{
    int cur[32];
    for (int i = 0; i < 32; i++)
        cur[i] = ptxt[i];
    for (int i = 0; i < 7; i++)
    {
        for (int j = 0; j < 32; j++)
            cur[j] ^= pi[i][j] ^ KEY[j];
        for (int j = 0; j < 32; j++)
            cur[j] = sbox[cur[j]];
        int t = 0;
        for (int j = 0; j < 32; j++)
            t ^= cur[j];
        for (int j = 0; j < 32; j++)
            cur[j] ^= t;
    }
    for (int i = 0; i < 32; i++)
        cur[i] ^= pi[7][i] ^ KEY[i];
    for (int i = 0; i < 32; i++)
        cur[i] = sbox[cur[i]];
    for (int i = 0; i < 32; i++)
        cur[i] ^= pi[8][i] ^ KEY[i];
    for (int i = 0; i < 32; i++)
        if (cur[i] != ctxt[i])
            return false;
    return true;
}

void backtrack(int idx)
{
    if (idx == 32)
    {
        if (check())
        {
            cout << "FOUND!" << endl;
            for (int i = 0; i < 32; i++)
                cout << KEY[i] << ", ";
            cout << endl;
        }
        return;
    }
    for (int i = 0; i < sz[idx]; i++)
    {
        KEY[idx] = pos[idx][i];
        backtrack(idx + 1);
    }
    return;
}

int main(void)
{
    for (int i = 0; i < (1 << 28); i++)
    {
        if (i % 1000000 == 0)
            cout << i << endl;
        int t = i;
        for (int j = 0; j < 7; j++)
        {
            part[j] = t & 15;
            t >>= 4;
        }
        unsigned long long int add = 1;
        for (int j = 0; j < 32; j++)
        {
            sz[j] = 0;
            for (int k = 0; k < 16; k++)
            {
                int cur = ptxt[j];
                for (int l = 0; l < 7; l++)
                {
                    cur ^= pi[l][j] ^ k;
                    cur = sbox[cur];
                    cur ^= part[l];
                }
                cur ^= pi[7][j] ^ k;
                cur = sbox[cur];
                cur ^= pi[8][j] ^ k;
                if (cur == ctxt[j])
                {
                    pos[j][sz[j]++] = k;
                }
            }
            add = add * sz[j];
            if (add == 0)
                break;
        }
        if (add != 0)
            backtrack(0);
        tot += add;
    }
    cout << tot << endl;
    return 0;
}