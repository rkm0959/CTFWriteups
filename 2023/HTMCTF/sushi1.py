from sage.all import *
from Crypto.Util.number import long_to_bytes, isPrime, inverse

from sage.modules.free_module_integer import IntegerLattice

# Directly taken from rbtree's LLL repository
# From https://oddcoder.com/LOL-34c3/, https://hackmd.io/@hakatashi/B1OM7HFVI
def Babai_CVP(mat, target):
	M = IntegerLattice(mat, lll_reduce=True).reduced_basis
	G = M.gram_schmidt()[0]
	diff = target
	for i in reversed(range(G.nrows())):
		diff -=  M[i] * ((diff * G[i]) / (G[i] * G[i])).round()
	return target - diff


def solve(mat, lb, ub, weight = None):
	num_var  = mat.nrows()
	num_ineq = mat.ncols()

	max_element = 0 
	for i in range(num_var):
		for j in range(num_ineq):
			max_element = max(max_element, abs(mat[i, j]))

	if weight == None:
		weight = num_ineq * max_element

    # sanity checker
	if len(lb) != num_ineq:
		print("Fail: len(lb) != num_ineq")
		return

	if len(ub) != num_ineq:
		print("Fail: len(ub) != num_ineq")
		return

	for i in range(num_ineq):
		if lb[i] > ub[i]:
			print("Fail: lb[i] > ub[i] at index", i)
			return

    	# heuristic for number of solutions
	DET = 0

	if num_var == num_ineq:
		DET = abs(mat.det())
		num_sol = 1
		for i in range(num_ineq):
			num_sol *= (ub[i] - lb[i])
		if DET == 0:
			print("Zero Determinant")
		else:
			num_sol //= DET
			# + 1 added in for the sake of not making it zero...
			print("Expected Number of Solutions : ", num_sol + 1)

	# scaling process begins
	max_diff = max([ub[i] - lb[i] for i in range(num_ineq)])
	applied_weights = []

	for i in range(num_ineq):
		ineq_weight = weight if lb[i] == ub[i] else max_diff // (ub[i] - lb[i])
		applied_weights.append(ineq_weight)
		for j in range(num_var):
			mat[j, i] *= ineq_weight
		lb[i] *= ineq_weight
		ub[i] *= ineq_weight

	# Solve CVP
	target = vector([(lb[i] + ub[i]) // 2 for i in range(num_ineq)])
	result = Babai_CVP(mat, target)

	for i in range(num_ineq):
		if (lb[i] <= result[i] <= ub[i]) == False:
			print("Fail : inequality does not hold after solving")
			break
    
    	# recover x
	fin = None

	if DET != 0:
		mat = mat.transpose()
		fin = mat.solve_right(result)
	
	## recover your result
	return result, applied_weights, fin

F = RealField(3000)

n = 990853953648382437503731888872568785013804329239290721076418541795771569507440261620612308640652961121590348037236708702361580700250705591203587939980126323233833431892076634892318387020242015741789265095380967467201291693288654956012435416445991341222221539511583706970342630678909437274145759598920314784293470918464283814408418704426938549136143925649863711450268227592032494660523680280136089617838412326902639568680941504799777445608524961048789627301462833
c = 312168688094168684887530746663711142224819184527420449851136749248641895825646649162310024737395663075921549510262779965673286770730468773215063305158197748549937395602308558217528064655976647148323981103647078862713773074121667862786737690376212246588956833193632937835958166526006128435536115531865213269197137648990987207140262543956087199861542889002996727146832659889656384027201202873352819689303456895088190857667281342371263570535523695457095802010885279
x = (F("9.93659400123277470926327676478883140697376509010297766512845139881487348637477791719517951397052010880811619509960535668814993293095146708957649613776125686226138447162258666762024346093786649228730054881453449071976210130217897905782845690384638460560301964009359233596889465133986468021963885911072779457835979983964294586954038412718305000570678333513135467257498071686562749882446495426493483289204e230"), F("-1.20540611958254673086539287012513674064476659427085664430224592760592531301348857885707154893714440960111029743010026152632150988429192286517249118913535366887447596463819555191858702861383725310592687577510708180057642425944345656558038998574368521689142109798891989865473206201635908814994474491537093810680632691594902962470061189337645818851446622588020765058461348047229165216450857822980873846637e230"))
y = (F("9.02899744041999015549480362358897037217795303901085937071039171882835297563545959015336648016772002396355451308252077767567617065937943765701645833054147976124287566465577491039263554806622908070370269238064956822205986576949383035741108310668397305286076364909407660314991847716094610949669608550117248147017329449889127749721988228613503029640191269319151291514601769696635252288607881829734506023770e191"), F("2.82245306887391321716872765000993510002376761684498801971981175059452895101888694909625866715259620501905532121092041448909218372087306882364769769589919830746245167403566884491547911250261820661981772195356239940907493773024918284094309809964348965190219508641693641202225028173892050377939993484981988687903270349415531065381420872722271855270893103191849754016799925873189392548972340802542077635974e192"))

# 10^230 + [10^-170]
# 10^190 + [10^-210]

# n = x1^2 + ey1^2 = x2^2 + ey2^2

# x1^2 = n - ey1^2
# x2^2 = sqs_x + ey1^2 - n
# y2^2 = sqs_y - y1^2

# x1^2 + x2^2 = ?
# y1^2 + y2^2 = ?

sqs_x = int(F(x[0]) ** 2 + F(x[1]) ** 2)
sqs_y = int(F(y[0]) ** 2 + F(y[1]) ** 2)

sqs_y += 1

e = (2 * n - sqs_x) // sqs_y 
sqs_x = 2 * n - e * sqs_y

print(e)
print(isPrime(e))

print("sqs_x", sqs_x)
print("sqs_y", sqs_y)

inner_prod = F(x[0]) * F(y[0]) + F(x[1]) * F(y[1])
another_prod = F(x[0]) * F(y[1]) - F(x[1]) * F(y[0])

u = int(inner_prod)
v = int(another_prod)

# (u + delta_x)^2 + (v + delta_y)^2 == sqs_x * sqs_y
# 2udelta_x + [small] + 2v delta_y + [small] = sqsx * sqsy - u * u - v * v

M = Matrix(ZZ, 2, 3)
lb = [0] * 3
ub = [0] * 3

M[0, 0] = 2 * u 
M[1, 0] = 2 * v
M[0, 1] = 1
M[1, 2] = 1

lb[0] = sqs_x * sqs_y - u * u - v * v - (10 ** 50) * 8 
ub[0] = sqs_x * sqs_y - u * u - v * v + (10 ** 50) * 8

lb[1] = -(10 ** 25) * 2 
ub[1] = (10 ** 25) * 2 

lb[2] = -(10 ** 25) * 2 
ub[2] = (10 ** 25) * 2 

result, applied_weights, fin = solve(M, lb, ub)

delta_x = result[1] // applied_weights[1]
delta_y = result[2] // applied_weights[2]

print("val1", u + delta_x)
print("val2", v + delta_y)




x1 = 993315378106395196440156892634615357425859001976376351903878161126954317590016249318316631584063366449446002974804447367756266228508159317926113473123770241598131922105753478630709094061327843793983555725542453353312556415777678937

y1 = 193518098174342694414424160720807163740044134017573004218248685165604434384710484681124817651698709818703976889508767807895216618103609127904817977547152172876909535027087606807328610207963608

x2 = 123343431936894440973263647479974540141395074556779828339916509613682879668610901423506961118285523166037774054833601787794419590891163752205158573276826154790166536984681500991748749778629881670438838666011425669518792357094873553

y2=  2957028917590401838272414886210261099554152128524012256631787151968768935090286908219944634008304129914083074684507666539700290047827545862670465906725813971398170535104589598065683927537059268

assert n == x1 * x1 + e * y1 * y1 
assert n == x2 * x2 + e * y2 * y2

assert x1 * x1 + x2 * x2 == sqs_x 
assert y1 * y1 + y2 * y2 == sqs_y

print(n)

print(GCD(n, x1 * y1 + x2 * y2))
print(GCD(n, x1 * y2 - x2 * y1))

p = 957509848415776008506125961998120495161250346184055094697245571121876444575553394581756735245207167681344755095903616730328731358607257251854603846193989936802222147961302618645021044609662945352893811478461448918625795339911124621
q = n // p 

assert p * q == n
assert isPrime(p) and isPrime(q)

c = 312168688094168684887530746663711142224819184527420449851136749248641895825646649162310024737395663075921549510262779965673286770730468773215063305158197748549937395602308558217528064655976647148323981103647078862713773074121667862786737690376212246588956833193632937835958166526006128435536115531865213269197137648990987207140262543956087199861542889002996727146832659889656384027201202873352819689303456895088190857667281342371263570535523695457095802010885279


d = inverse(e, (p - 1) * (q - 1))

print(long_to_bytes(pow(c, d, n) ^ x1 ^ y1 ^ x2 ^ y2))