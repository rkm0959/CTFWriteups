from sage.all import *
from Crypto.Util.number import long_to_bytes

# d^3, phi^3, flag^3 mod n

# phi = (p - 1)(q - 1)
# 3d == 1 mod phi

# 3d = phi + 1

# 3d = 2phi + 1

n = 24476383567792760737445809443492789639532562013922247811020136923589010741644222420227206374197451638950771413340924096340837752043249937740661704552394497914758536695641625358888570907798672682231978378863166006326676708689766394246962358644899609302315269836924417613853084331305979037961661767481870702409724154783024602585993523452019004639755830872907936352210725695418551084182173371461071253191795891364697373409661909944972555863676405650352874457152520233049140800885827642997470620526948414532553390007363221770832301261733085022095468538192372251696747049088035108525038449982810535032819511871880097702167
enc_d = 23851971033205169724442925873736356542293022048328010529601922038597156073052741135967263406916098353904000351147783737673489182435902916159670398843992581022424040234578709904403027939686144718982884200573860698818686908312301218022582288691503272265090891919878763225922888973146019154932207221041956907361037238034826284737842344007626825211682868274941550017877866773242511532247005459314727939294024278155232050689062951137001487973659259356715242237299506824804517181218221923331473121877871094364766799442907255801213557820110837044140390668415470724167526835848871056818034641517677763554906855446709546993374
enc_phi = 3988439673093122433640268099760031932750589560901017694612294237734994528445711289776522094320029720250901589476622749396945875113134575148954745649956408698129211447217738399970996146231987508863215840103938468351716403487636203224224211948248426979344488189039912815110421219060901595845157989550626732212856972549465190609710288441075239289727079931558808667820980978069512061297536414547224423337930529183537834934423347408747058506318052591007082711258005394876388007279867425728777595263973387697391413008399180495885227570437439156801767814674612719688588210328293559385199717899996385433488332567823928840559
enc_flag = 24033688910716813631334059349597835978066437874275978149197947048266360284414281504254842680128144566593025304122689062491362078754654845221441355173479792783568043865858117683452266200159044180325485093879621270026569149364489793568633147270150444227384468763682612472279672856584861388549164193349969030657929104643396225271183660397476206979899360949458826408961911095994102002214251057409490674577323972717947269749817048145947578717519514253771112820567828846282185208033831611286468127988373756949337813132960947907670681901742312384117809682232325292812758263309998505244566881893895088185810009313758025764867

def GCD(f, g, n):
    g = g % f
    if g == 0:
        return f
    t = g.lc()
    if gcd(t, n) != 1:
        print(t)
        exit()
    tt = inverse_mod(Integer(t), n)
    g = g * tt
    return GCD(g, f, n)


# 3d = phi + 1
# 3d = 2phi + 1

PR = PolynomialRing(Zmod(n), 'x')
x = PR.gen()

f = x * x * x - Zmod(n)(enc_d)
g = (3 * x - 1) ** 3 - Zmod(n)(enc_phi)

h = (3 * x - 1) ** 3 - Zmod(n)(enc_phi) * 8


print(GCD(f, g, n))
print(GCD(f, h, n))

d = n - 8158794522597586912481936481164263213177520671307415937006712307863003580548074140075735458065817212983590471113641365446945917347749979246887234850798165971586178898547208452962856969266224227410659459621055335442225569563255464748987452881633203100771756612308139204617694777101993012653887255827290234136783333849589032871375851101329276310630006705237678241316930116774927535065429024097292512767975374690854583542698077557526940992563735238331948593851459061815815177190293870434501961346826345496867658751768619834298793653873005584274638028219851951778585552837003584198356332900288029661898158912212072318636


print(long_to_bytes(pow(enc_flag, d, n)))