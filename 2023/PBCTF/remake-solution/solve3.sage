import os 
from Crypto.Util.number import long_to_bytes
import time 

st = time.time()

p = 20206629497318640302613717177493021659164910368667008120702312168658959729889280963268869447056316491892128508524975162223724948508181049113205403468161303
PR.<x> = PolynomialRing(GF(p))

f = 120240458349142196777462002806769349281165723494683732989083699020476235792180752642273055657141708347*x^7 + 43702762731756856225193530585747567700609009010593265529076291828332620921193865991903982935280928696*x^6 + 66742610447429428817366180707200350235291618033097320626893666201036423466905593223128856596517455039*x^5 + 63031675848430017482485880342955884769291566790271002334095611361178377204121055898553769655572802998*x^4 + 73551004247039298713506464216106486832855555473943539450955116084581822047116438494052971492741787353*x^3 + 103980310160513080155264590773421419484053537304074203924614986854547620459142032682836298957636074146*x^2 + 100530104457775034008443059788814962668335386078661701461256355711423064081802002152448681318698671065*x + 74749876241725972625141395620386798947434400296543717231503622934162104749079408980985018578978951986

lmao = (x^3 + 13441279154284544764330805782065565325543470739559917045273482055514440837785754044182874902421009026981197721504820302867945812937528249594953326223176272*x^2 + 3795282115520834934850220740151212731596814319504043674340537364041453624883995759365119899076774262882230308591629439035308527946872182029742910504122735*x + 3726617245981099594981815385059428688276726297460965450328320328460867196111587736356492934195556032891106446058683147130913147722036293641303193921962091, 2103349591221335944593862709600493681857281410337020721978302326614691696399677635217262732543672829811190387220058078405239568477387817550236173432744263*x^2 + 4784247634355946154999459446762911004042472267922959302672838559247991353014786987556174410735592161587023899368989617780068662559773261109676326152316907*x + 2640959823121300693709616791657128464111647959613642856293592234010564318329382577397798309822254798484629398268742247779165733848105319417195858443049412)

fc = f.coefficients(sparse = False)
lmaoc = lmao[0].coefficients(sparse = False)

root1 = lmao[0].roots()[0][0]
root2 = lmao[0].roots()[1][0]
root3 = lmao[0].roots()[2][0]

res1 = -lmao[1](root1)
res2 = -lmao[1](root2)
res3 = -lmao[1](root3)

base_poly = PR.lagrange_polynomial([(root1, res1), (root2, res2), (root3, res3)])

X, U, V = GF(p)['X,U,V'].gens()

g = (X - root1) * (X - root2) * (X - root3) * (X + V) + base_poly.coefficients(sparse=False)[2] * U * X * X + base_poly.coefficients(sparse=False)[1] * U * X + base_poly.coefficients(sparse=False)[0] * U

VAL = g * g - U * U * (fc[0] + fc[1] * X + fc[2] * (X ** 2) + fc[3] * (X ** 3) + fc[4] * (X ** 4) + fc[5] * (X ** 5) + fc[6] * (X ** 6) + fc[7] * (X ** 7))

Is = [0] * 6
for i in range(8, 2, -1):
    Is[i - 3] = VAL.coefficient({X: i})
    VAL -= (X ** i) * Is[i - 3]
    VAL += (X ** (i - 3)) * (-lmaoc[2] * X * X - lmaoc[1] * X - lmaoc[0]) * Is[i - 3]

A = - Is[4] / GF(p)(5)

EQ0 = 10 * A * A - Is[3]
EQ1 = 10 * (A ** 3) + Is[2]
EQ2 = 5 * (A ** 4) - Is[1]
EQ3 = A ** 5 + Is[0]

BOUND = 16
pol1 = EQ0.sylvester_matrix(EQ1, V).determinant()
res_u = 0
for i in range(0, BOUND):
    res_u += (x ** i) * GF(p)(pol1.coefficient({U:i}))
u_val = PR(res_u).roots()

pol2 = EQ0.sylvester_matrix(EQ1, U).determinant()
res_v = 0
for i in range(0, BOUND):
    res_v += (x ** i) * GF(p)(pol2.coefficient({V:i}))
v_val = PR(res_v).roots()

for fin_u, exu in u_val:
    for fin_v, exv in v_val:
        fin_g = (x - root1) * (x - root2) * (x - root3) * (x + fin_v) + base_poly.coefficients(sparse=False)[2] * fin_u * x * x + base_poly.coefficients(sparse=False)[1] * fin_u * x + base_poly.coefficients(sparse=False)[0] * fin_u
        VAL = fin_g * fin_g - fin_u * fin_u * f 
        TT = (VAL // lmao[0]).roots()
        if len(TT) == 1 and TT[0][1] == 5:
            print(long_to_bytes(int(TT[0][0])))
            print(long_to_bytes(p - int(TT[0][0])))

print(time.time() - st)