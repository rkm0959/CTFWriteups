p = 12022348156596660999966024805317365692214838036337325208414289984663889921502416753085931743030831771121692950289876216078866039507020072658832499672904927

PR.<x> = PolynomialRing(GF(p))


D6 = (x^2 + 6106105760613229930922967928674194772311203495584899831908007722665915887604567524130011714211274238017162468796768873960998817929601626003988171559055311*x + 8353639222234371469381448272508733643135697105558047478854585109935480411915187137498318296437613301979306509039890224736362852436910491641294487128458694, 11174320243202866558065240046782750133803672540853882720989304292750647059310760847379190517566707897494367918287535024822914183996182344175519925897513754*x + 9117855201058206589443560045632239509110354537234084579277106131911457901329328843577651067905800695533557105057771128471218842605638620032058901751650682)
D12 = (x^2 + 11371626253936327909163504150857869238942889568649389290490980590124069881231599575833636550860042619639618098042739309731465654139265838190238323698382259*x + 2839754429446126138333730666979352606344262899190194743863472396613547166444605132778574408306588635075824236973065898455647503305170351195521291132960112,  6052843492370947098034248244251355678347716339175785583491297370020149787083021113295802982171881283982057147009093798338977888182167575433028404074972150*x + 7701087923542095060588326624421916518415668669792764195541316292662335194730241275395376352015225128858810864867298533627915196562039880263752229015880648)
D20 = (x^2 + 1058237144218977274284977420549692696192075802402239930802501170774176036744077649350338849952621388694787606661369297646683075670710777739711788105260863*x + 7842760167147165189619048646437078491026594254003197586040312126715715753296907707631057822444909610713620617863838435434293068956208675216715952007079459, 10731022609207190023363797728647619303703471061355457576225760675283021999546886261329693341162112240796175920162262074777242064439055157759895188727854073*x + 6756849530756338641792676822145479996871979591411550689002415403299093864167366412008642895308846873265842445274174073238731083439838670041117597886208801)


# v^2 - f == 0 mod u
# f == v^2 mod u


RR0 = PR.quotient(D6[0])
G0 = (RR0(D12[0] * D20[0]) ^ -1).lift()

RR1 = PR.quotient(D12[0])
G1 = (RR1(D20[0] * D6[0]) ^ -1).lift()

RR2 = PR.quotient(D20[0])
G2 = (RR2(D6[0] * D12[0]) ^ -1).lift()


f = 0
f += (D12[0] * D20[0]) * G0 * D6[1] * D6[1]
f += (D20[0] * D6[0]) * G1 * D12[1] * D12[1]
f += (D6[0] * D12[0]) * G2 * D20[1] * D20[1]

f %= (D6[0] * D12[0] * D20[0])

assert (f - D6[1] ** 2) % D6[0] == 0
assert (f - D12[1] ** 2) % D12[0] == 0
assert (f - D20[1] ** 2) % D20[0] == 0

HC = HyperellipticCurve(f, 0)
J = HC.jacobian()(GF(p))

DJ6 = J(D6)
DJ12 = J(D12)
DJ20 = J(D20)

DJ2 = DJ20 - DJ12 - DJ6 

print(DJ2)

lmao = GF(p)(-10911117908165287338543376790398941018672785541668252679136200204726007404095173400026752376292064875928958356467082960695944581438465260630102316494145961)

xv = lmao / GF(p)(2)

yv = f(xv).nth_root(2)

print(int(yv).to_bytes(64, "big"))

yv = int(p) - int(yv)

print(int(yv).to_bytes(64, "big"))