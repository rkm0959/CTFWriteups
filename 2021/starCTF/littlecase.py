def trial(k, d, N, e):
	if k == 0 or (e * d - 1) % k != 0:
		return -1 
	phiN = (e * d - 1) // k
	sumpr = N - phiN + 1
	mulpr = N
	if sumpr * sumpr <= 4 * mulpr:
		return -1
	T = kthp(sumpr * sumpr - 4 * mulpr, 2)
	if T * T != sumpr * sumpr - 4 * mulpr:
		return -1
	p = (sumpr - T) // 2
	q = (sumpr + T) // 2
	if p != 1 and q != 1:
		return p
	return -1

def get_red(e, n):
	cur_num, cur_den = e, n
	num_1, den_1 = 0, 1
	num_2, den_2 = 1, 0
	while True:
		val = cur_num // cur_den
		nxt_num = cur_den
		nxt_den = cur_num - val * cur_den
		num_3 = val * num_2 + num_1
		den_3 = val * den_2 + den_1
		p = trial(num_3, den_3, n, e)
		if p != -1:
			return p
		num_1, den_1 = num_2, den_2
		num_2, den_2 = num_3, den_3
		cur_num, cur_den = nxt_num, nxt_den

n_1 = 21669699875387343975765484834175962461348837371447024695458479154615348697330944566714587217852888702291368306637977095490953192701450127798670425959768118384915082017373951315699899009631834471691811815393784748930880954114446745814058132752897827717077886547911476575751254872623927783670252969995075629255541621917767501261249192653546875104532649043219697616464205772025267019328364349763854659490144531087349974469079255236823096415094552037488277752927579909539401311624671444833332618177513356173537573280352724384376372955100031534236816681805396608147647003653628203258681097552049114308367967967184116839561
e_1 = 20717541468269984768938524534679430706714860712589983300712432366828367981392533792814384884126053081363266457682162675931547901815985830455612301105504518353600255693451085179954519939635263372257973143178677586338992274607959326361412487748088349413448526455377296931144384663805056580662706419414607407821761761574754611275621927387380065975844282519447660467416826579669726178901884060454994606177784839804528666823956703141147239309978420776148158425922031573513062568162012505209805669623841355103885621402814626329355281853436655713194649170570579414480803671531927080535374958180810697826214794117466378050607
c_1 = 17653913822265292046140436077352027388518012934178497059850703004839268622175666123728756590505344279395546682262531546841391088108347695091027910544112830270722179480786859703225421972669021406495452107007154426730798752912163553332446929049057464612267870012438268458914652129391150217932076946886301294155031704279222594842585123671871118879574946424138391703308869753154497665630799300138651304835205755177940116680821142858923842124294529640719629497853598914963074656319325664210104788201957945801990296604585721820046391439235286951088086966253038989586737352467905401107613763487302070546247282406664431777475
n_tr = 22346087036331379968192118389403047568445805414881948978518580277027027486284293415097623011228506968071753709256352246733181304513713003096615266613365080909760605498017330085960699607777361429562376124376340215426398797920168016137830563564636922257215066266075494625782943973857490781916694118187094786034792437781964601089843549995939887939410763350338658901108020658475956489391300528691289604149598720803012371765770928211044755626045817053870803040863722458554924076011151695567147976903053993914859714631837755435592006986598006207692599019026644753575853382810261910332197447386727419606073948645238377595719
c_tr = 12732299056226934743176360461051108799706450051853623472248552066649321279227693844417404789169416642586313895494292082308084823101092675162498154181999270703392144766031531668783213589136974486867571090321426005719333327425286160436925591205840653712046866950957876967715226097699016798471712274797888761218915345301238306497841970203137048433491914195023230951832644259526895087301990301002618450573323078919808182376666320244077837033894089805640452791930176084416087344594957596135877833163152566525019063919662459299054294655118065279192807949989681674190983739625056255497842063989284921411358232926435537518406

p_1 = get_red(e_1, n_1)
q_1 = n_1 // p_1
d_1 = inverse(e_1, (p_1 - 1) * (q_1 - 1))
p = pow(c_1, d_1, n_1) + 1
q = n_tr // p


print(p)
print(q)
print(c_tr % p)
print(c_tr % q)

# adlemann root extraction
val_p = 131298744324020262069058098011153596223402034907100440342948668087163164464220393351766206491914079284967680111332591328848444500225373441683396542143585883990010952065209323008833602586395260150486838116234566714364783803986724783801832207954374705569940592681091901055313666904353011763179402389117014572914
val_q = 12683552991899386471128510919036002638821003406271171866915440541172623354290935306194209782257632539096352580405077755422903216431367527794019730712669915809214110987550293294680621155685595770055839168272784395508710422120182512524784659540064305999319440033801061201417029244509408822365331688315230704435

u_1 = val_p
adv_p = pow(7, (p-1)//4919, p)

for i in tqdm(range(0, 4918)):
	ff = long_to_bytes(u_1)
	if b"*CTF" in ff:
		print(ff)
	u_1 = (u_1 * adv_p) % p