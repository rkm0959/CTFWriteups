from Crypto.Cipher import AES, PKCS1_OAEP, PKCS1_v1_5
from Crypto.PublicKey import RSA
from Crypto.Util.number import inverse, long_to_bytes, bytes_to_long, isPrime, getPrime, GCD
from tqdm import tqdm
from pwn import *
from sage.all import *
import gmpy2, pickle, itertools, sys, json, hashlib, os, math, time, base64, binascii, string, re, struct, datetime, subprocess
import numpy as np
import random as rand
import multiprocessing as mp
from base64 import b64encode, b64decode
from sage.modules.free_module_integer import IntegerLattice
from ecdsa import ecdsa

global POL, x, dvi

POL = PolynomialRing(GF(2), 'x')
x = POL.gen()
dvi = x ** 128 + x ** 7 + x ** 2 + x + 1

class RNG:
	def __init__(self, seed, a, b):
		self.state = seed
		self.a = a
		self.b = b

	def nextbits(self, bitlen):
		out = []
		outs = 0
		for _ in range(bitlen):
			outs <<= 1
			self.state = (self.a * self.state + self.b) % dvi
			bit = int(sum(self.state[i] for i in range(7)))
			out.append(GF(2)(bit))
			outs += int(bit)
		return out, outs

def get_params(rng, bitlen):
	u, v = rng.nextbits(bitlen)
	p = next_prime((1 << (bitlen - 1)) | v)
	u, v = rng.nextbits(bitlen)
	q = next_prime((1 << (bitlen - 1)) | v)
	N = p * q
	return N, p, q

'''
r = remote('crypto.be.ax', 6003)
for _ in range(10):
	print(r.recvline())

flip = []

for i in range(26):
	res = ((1 << 20) - 1) * (1 << (20 * i))
	gogo = hex(res)[2:]
	r.sendline(gogo)
	val = int(r.recvline().split()[-1])
	flip.append(val)
print(r.recvline())
print(flip)
'''

def perform(P):
	a = 'x^127 + x^126 + x^124 + x^123 + x^122 + x^118 + x^115 + x^113 + x^109 + x^108 + x^107 + x^106 + x^105 + x^104 + x^99 + x^95 + x^93 + x^92 + x^88 + x^85 + x^82 + x^79 + x^78 + x^77 + x^75 + x^74 + x^73 + x^72 + x^70 + x^67 + x^66 + x^65 + x^64 + x^62 + x^61 + x^60 + x^59 + x^58 + x^55 + x^51 + x^49 + x^48 + x^47 + x^45 + x^44 + x^42 + x^41 + x^39 + x^38 + x^37 + x^36 + x^35 + x^30 + x^29 + x^28 + x^27 + x^24 + x^23 + x^22 + x^19 + x^18 + x^15 + x^14 + x^13 + x^12 + x^11 + x^8 + x^7 + x^4'
	b = 'x^127 + x^123 + x^120 + x^114 + x^112 + x^111 + x^109 + x^108 + x^107 + x^104 + x^101 + x^98 + x^94 + x^92 + x^90 + x^89 + x^87 + x^86 + x^83 + x^81 + x^80 + x^79 + x^77 + x^76 + x^75 + x^71 + x^68 + x^67 + x^66 + x^62 + x^61 + x^57 + x^55 + x^49 + x^48 + x^44 + x^43 + x^42 + x^39 + x^38 + x^34 + x^32 + x^27 + x^24 + x^23 + x^21 + x^20 + x^17 + x^16 + x^15 + x^14 + x^12 + x^11 + x^10 + x^9 + x^8 + x^0'
	iv = '339ba6b2ac7a006b8a3cd503b75abd64'
	enc = '6ee4c665efcf80d5e0092639ab3a65b6c2d640c459719117978863a069a5603c9d1561d0c1923bf6cbec94fa780482b67d6759be21c268bf23ba580bbdd0556c5a4e2a4f49c4857135b065f72f12f8a5'
	aa = 0
	bb = 0 
	for tt in a.split():
		if tt.startswith('x^'):
			aa += (x ** int(tt[2:]))
	for tt in b.split():
		if tt.startswith('x^'):
			bb += (x ** int(tt[2:]))
	wow = []
	ST = 3
	EN = 500
	cc = RNG(0, aa, bb)
	res, resv = cc.nextbits(512)
	res = res[ST:EN]
	wow.append(res)
	for i in range(128):
		cc = RNG(x ** i, aa, bb)
		res, resv = cc.nextbits(512)
		res = res[ST:EN]
		wow.append(res)
	M = Matrix(GF(2), EN - ST, 128)
	for i in range(EN - ST):
		for j in range(128):
			M[i, j] = wow[j + 1][i] - wow[0][i]
	target = []
	
	for i in range(511-ST, 511-EN, -1): 
		cc = ((P >> i) & 1)
		target.append(GF(2)(cc))
	for i in range(0, EN-ST):
		target[i] -= GF(2)(wow[0][i])
	
	basis = M.right_kernel().basis()
	v = vector(target)

	try:
		fin = M.solve_right(v)
		for i in range(1 << len(basis)):
			cur = fin
			for j in range(len(basis)):
				if ((i >> j) & 1) == 1:
					cur += basis[j]
			key = 0
			for k in range(128):
				key = 2 * key + int(cur[k])
			key = long_to_bytes(key)
			cipher = AES.new(key, AES.MODE_CBC, iv=bytes.fromhex(iv))
			print(cipher.decrypt(bytes.fromhex(enc)))
			key = 0
			for k in range(128):
				key = GF(2)(cur[k]) * (x ** k)
			rng = RNG(key, aa, bb)
			NN, pp, qq = get_params(rng, 512)
			print(pp)
			print(qq)

	except:
		pass
	
N = 73339620129667676023974950542969132278784734660506737976298732134026527359291915193332437127457429324481964295010006261598194024348024208586115513803646194216798939396746872418595547644377664497612593706914244455118061874515700449990439979676203004592649537189205818034238700866975584403194045124833670915303
e = 65537
g = 12897905741049761476196332801832499573483278038066469207554448309458673330701553007285400429100086192603718575934424409727152149491484923520785976656181718228179460084981470264139776416458241422772876644819854445312497562086465377230200766971184404979354216103714134975612350538252909194838959744263532340383
r = 163276997926836489931161283548309784825461614375609947125153655898363911377069426666621217022844349089141371110974636597215530522306711540308824486493059410003615317631572482917824044707751532345685820154713150342128075879841273576381073398524465919443609654662033066805682883923942409879524871259940337562433
flips = [22418454359151406967109053985387684350926918246322644443987682138347299237308945671141079013259819985173225760868103778179538924741761066917119629334118895434440554756563969107428067413580381294839914734860893768709426455255524910917775616793513317654793046886644803412409789065131138211110736037255414883735, 75289229218850590275453258549723379378409589200187524805744405041218901225712503455722636101134401387528739747050899670445776574863032268330828948949676839744451675859903927358363699791961943332345997757597336570120684057625252014531594983058395846604069635790887758512340887119387646840037024687227777733468, 51122943850345172454228446463519899723278627808175902345651489400023980667171611495651120826506726975716418363402158313440656240192424347459035001926779220376548288003753642185787486679408775037620400653323067113722555556506535487954363093914279621786662210325651263956736297106459220017818887546749114091183, 144080585386916730997713746137938271958422405551606145424146427266689300572446226232251507328761645645853350409802036949430679301734290333059090124690849328640128643707849664166569085738507546398755158476475104931904210795080498520211288981751774983822514184364733100391502792362240186556694538587205164789428, 51473775331555818418370779845228943089924776683842226011354573450409686773063146797039284463730065948799246795305161820258241038184837825898547189729418092324075823539691026227065491467304445230039072969628819656482895913299983738560800802828987784760099440179225681279003181926071673870646247120430591793218, 82923697547915099699754677952110591601677492405220042715810800892953056997416522318339838743767000242739351630911538094955532097983370643912058455032515144930650410898914116355999866067451369169643772209927539805289017280312272467211112645524593686183954742149092373094076530305356088367107922367583395353233, 51960605897056622975499475227500927054503761775306506627476881496069372932256275787983590189918728731060467501451456698351201980361675052849050623125305034205386098724172578104154794823666476149081267806890475180690440219245394346340510227886588031957551499618055501440042214265677721056708286195219208355108, 117284462673555031645786677910453501813379876182695916287625360850883891827548647816151433519705622500077538560283794700194392523984173691341334383478448646823973677771934116017192833484680498774273947867974558834858131125348158638940504346615420153476272732865971311110780337533501454911130290659509340344510, 70244888409088840230801109603449493054518104837531648244708174596336136861207920031549064154367677427118332009808962677478080019764094023988815529129385759095076351293375119802648046569038377895610218721307808338024057880609355606158333941390553793143742352026100896364452579016689557188969569267092612808167, 113175595613845692784831467262225761639767456892330655355792546191263794637270847655448307985080539628307131811936498259938734594666885288841037837232472369493185173664749322186049292597709802891863853935455164523136097999194396596336387515165961313172504983045859555512993677367462791072073664690480532132583, 117798219304150822355496815703605617981806055802686692887073407920247673735245473058367516258984015381173657016476044145216884813662976445981791199896293761322419990193644933705826996649078762999617761990879431909465053052982807841645592797684016550186854142515406345384467846345785539824946956259033324638136, 130137904372088315373131148797384568829063698498318626286461781055643879402868843228140570503598507795615991259162820843507243890753053483675676909502166916915361664030875650987901283289026770261725289678758271288435507586628725637829776655507188613915667792999907977269127486510152175310465888735456231145042, 3729329125598086908049957243419225567648627221775975348074002344076710240946347621537000612472257157516366371160252112006282413861888800450794584262703669669396200779187742052607993929028869078272987475158921526634069640556934614503981582471576573248459691679127876411458987831888944924542480293748187822066, 95159356923212907830614029153861259897813126535145365707721385463717691294006036388181633945988222466163972870055045779324359333708934399922924567350556599213198998341730495587149780900970455295870065920881058402352101991393134408660545722733886484537156240253132156206652774203880410641291835124234083221027, 13013055887652078047288203983082745158632911907708948499627567709196458758618795464482158248829398299772923623859490536186898787058545876587558584982904760219826517955777314589571707823588015346078072529181234957521782398223425699380088852948525295374766834928105145348472002551887502583310897591742734907054, 60924582151128036903358559651332245365835092064205241180150986097715824830905437887778568764360123199540075988706310987501640686504454453091714361914625210727251798767925022031570664408651568019016507093974520556931780879652067812875398244494115066919934225681332625036752323248845147968530459127988583239741, 22127395994206138837695731043713282540082710541149300496391920305258953004576113043447181851593680724368315582284585282815793576691853637991690619177371454436099520144872361697986075718140036152618154930807502262040479188289942171498968797183509812450896596546659076497897928735489842002517245608304878390736, 35962376135864924503807562932191700500699481333961452203098204508242960401809491407505599580083505041572002940586625019370894871377788792531057606264632621249036691347559336265207690468810484210757145740693308531965848583420741469336649509140443513547092797479713940672459695746633215578207845708745261697472, 87681153008900980165292340931226334061327030481189098171302276532078055077895294762652416927450323018977367704804581526750131393597820829627921360391667590819210266841369352010979989116960210000478535261846868963346524264251783336892723584202754444801728052901375049317376370225263384627556511979323182154447, 155366220094258873783275019481899602646542097457464120057692106547466124587044590148225304436814748355253286436051821599233392242600298941790487508471543934462221711543201732665346179438061957014133554631086471639129464566096763240850288793611944710195281033315114737463177144911355049357309038129892295391658, 89255402824821504212852155188103050322844136418993138248741656771737859042825863507997728953952272773610714455040333061771913660477374001442257247574583576807644684741623722659101135437107114578101275722728155421658358343761012415174016477908930915377391236683599779540688384672918826361072432761686302089851, 55501770357615415011725121225565873237498067513380585510464297601529255986636676490383626042549811181540083786029404803663528527717536769917884844041419562223623737968009830644640123761811790539508266338130987546662033769652377493366220300677832139349403456060669081370569976832803737283655856391544566161689, 127639215529429427856604997903727632346045455213422825243673638300459616336384885153532765597875647503210681468803156876207669748671274540849886997842577568949290684163558657323123688435396586052117946971218612445754623455888080424600573605347019567414278379909081963164701328158641836785005330787882204185542, 40282936913526858261744011489979844597522333545833537683417967662100012536157001160139143687383551606966030250408192896488098867839356333397519231646110353802266713755266048891937648945394185183322860549866597093422301316468800041412662626115089587002867788434869537322897366029611557241260509382005248802017, 135067577019161405165727755013667108055987642263781622792252711726373504614858892877363641815343010273048193197151187517514258399680967332942641603734340148282005769293694831704409734700610386700517495960766545279861565287297566787061611587961848906975808160707644391724386949065615392806814740790202007305711, 57784842200867110151052845956413401204136307495797600121701998964679887915791164009865151453754076903445681576510886396661660202871170888640606714662503490783788303525885679414825221552995471647461158707066322463089161652990424251698486491387288423440313085007937613750337661045761567925483362113160654221998]

r = Integer(r)
F = GF(r)

from sage.groups.generic import bsgs

inv = [-1] * (1 << 21)
for i in range(1 << 20):
	target = (i ^ ((1 << 20) - 1)) - i + (1 << 20)
	assert inv[target] == -1 
	inv[target] = i 

tot = 0

for i in range(25):
	target = F(flips[i+1]) / F(flips[i])
	h = F(g) ** (1 << (20 * i + 20))
	tt = target * (h ** (1 << 20))
	res = int(bsgs(h, tt, (Integer(0), Integer(1 << 21))))
	org = inv[res]
	tot += org * (1 << (20 * i + 20))

target = F(flips[0]) / (F(g) ** tot)
res = int(bsgs(F(g), target, (Integer(0), Integer(1 << 20))))
res ^= ((1 << 20) - 1)
tot += res 

cur = tot
for i in range(26):
	res = ((1 << 20) - 1) * (1 << (20 * i))
	cur = cur ^ res 
	assert F(g) ** cur == F(flips[i])

p = GCD(N, pow(2, 65537 * tot, N) - 2)
q = N // p 

print(p)
print(q)

perform(p)
perform(q)