from Crypto.Cipher import AES, PKCS1_OAEP
from Crypto.PublicKey import RSA
from Crypto.Util.number import inverse, long_to_bytes, bytes_to_long, isPrime, getPrime
from tqdm import tqdm
from pwn import *
from sage.all import *
import sys, json, hashlib, os, math, time, base64, binascii, string, re, struct, datetime
import random as rand
import multiprocessing as mp


p = 23913162461506241913954601592637284046163153526897774745274721709391995411082414294401609291264387860355671317653627011946189434760951108211821677155027175527596657912855025319457656605884632294211661524895665376213283136003484198594304828143112655895399585295073436422517502327322352675617692540534545273072811490753897471536886588395908046162672249608111996239705154693112925449400691756514248425452588443058856375927654703767484584645385639739363661773243428539784987039554945923457524757103957080876709268568549852468939830286998008334302308043256863193950115079756866029069932812978097722854877041042275420770789
g = 2

h=5923777823209700421469794715930707999603487655981898449422357892842755521580568679804163539045179031106270014117273256138784597448478681230177860742155126020891697304006323076401490928335945940433914000224942851432511054551297211008666155463440349151664091937182131690171219715116514941592010447430791360540405344375229764599137242861289702073288011925063924328894521058436970565773435861877845797623536121104737287522040686798356660172000949381134222388515860802189384620507145354577028032863068824932528242026641123078630467060464312266151210808593836663684389223953685674628245634895912216995332139498891675729412
c1=15841669642799513382703370925818603902178481700840923545161934033100321146503868084900588927217114442984665667118577460536333117230632804458376545287474648588544547729069115731250096936465515738625518450188268415821956969922852821647959850165919691407147865613743286785729203868402483239513506078001926659569565849700817814912100477836551259556302047076140353950038140029083836368974735448112871859247145645453893923391402871253724681937402767600197890986879062368248591021917068730257429951826927119347881638519929753889728430033506371881478198610975214380168432419330014512081038469904388307938017575601466078331
c2=20980308195739585388840251875894742881015221885545911313167621997395787966965548427206821550213656074368310837496870246619475986341470484218595157539041479851684547924269518062835988910911073116548655352026577430899732878513271956656411255378657274224370632108816250357258256150126995560372349572226592270801770838453129888601424824757605125058051809002236802317316196644553976816559756081413743782144333098102299253043861839609099043946460148665729842204444861357854613348892896741322096121717577094380240894407806459966780100562260797920508366840383783646472267409058679509229807645391852867935100760134156182491258
c3=8768904047563298886677169490168966918289414985832644718096574517784880975022962509795321763779973065822432474276416651649440365959257898194342877431868745294123297870605865108493631284726686261522659805830253900535747398181168941751180447773297778677873767229967190043047685579392976663195267795930621740348638971638706010381180768233144807436468668964440515306883051182948872274265210980201579370835434913930464144976209730794967147771068759981878121882251813678009953937372758046102350807904409198972406766754752805360940861853628252305581781137391990429572312294938928362179624036117073389171261150785030059942700
c4=12419488730698545222115481492826327418183847269300030422995155223415630809493624190775635185379251633065966549409377646355800112282055135265736181220902815799724890425646572569790421862882454912487390159481544401843947443811007638547710771538442363518838542263860684960530576719043710264783536000942502727944917408604286626500621436987817454054231149361731578883237987166673909936148875055293359385883081052143807370574958268369136151036900599962029346106705537504388285348786707027659284707274236386361322674190379777320389067182303351999598272876640517896042738583060420187081299052833129083724447908208591843475415
c5=893080780847029308274368681626396600544552126739521651988181136070723657543202683032261498325901020944475593266721439986252726873062695009497285774781273260130239745474015391340529247148058595404619391551322915025208509283875397114215549153709849346098436514795077421458424610465081882068973513047489507486230979086379409741932617830527701505914453068243484824842279321520744845448756056173897047235145941395998598944605479721007044142742978104184434880292930861342829032141972304138117176917850956879325010172288994354786300970756893134182379388928648735221668466326903408032033190979181535192541717780216521755417
c6=16868695083816857505525800089097271185876848841301707567306597144688987136931134316383219718073977930675156941799554672612516843000698040756468634987830778172726733979425034239197711544850508187314268912664964061281971223339500805558570744831427221658098395054065010277234268617177911315906985931860998693904334148966175585880156089003987558061775469386726909446851603579135820201969656107310555594055598854138027941045512761491606258593138818466535674945168236687421754609812862791737412954920661002572895863532056545967733591085239242214334504365106259154818608898010639219811488029915088258497107896046238832347974
c7=22543584088396321036073704741445732833828615255896626993147692913487656144433571133095290179136895878897238887141815210840825558830460205527234325755110105928898100245676528580333428166430746940888021117427553444598761941676787745543364106259403320365964432467548035442914745962224237417711706291287705848283463556371649405099933235392590179601260277033799092945753465987657230794701991995662276994641370874513661340530682820867275088497184726551556455147601774549402576858090182373407319790496781367229552096246168860656650524710278724322125643710412050513128777805707934506977056497817567835653483582997260528950451

# enc : msg, h -> g^y, h^y * msg
# dec : r, c, x -> c * r^-x

v1 = c1
f1 = long_to_bytes(v1)

v3 = (c1 * c3 * inverse(c2, p)) % p
f3 = long_to_bytes(v3)

# f3 = c4 * ?
# f5 = c5 * ?^2

v5 = ((c5 * v3 * v3 * inverse(c4 ** 2, p))) % p
f5 = long_to_bytes(v5)

# f6 = c6 * ?
# f7 = c7 * ? / h

v7 = (c7 * v5 * inverse(c6, p) * inverse(h, p)) % p
f7 = long_to_bytes(v7)

print(f1 + f3 + f5 + f7)

