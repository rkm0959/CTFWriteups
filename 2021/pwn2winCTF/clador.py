from Crypto.Cipher import AES, PKCS1_OAEP, PKCS1_v1_5
from Crypto.PublicKey import RSA
from Crypto.Util.number import inverse, long_to_bytes, bytes_to_long, isPrime, getPrime
from tqdm import tqdm
from pwn import *
from sage.all import *
import itertools, sys, json, hashlib, os, math, time, base64, binascii, string, re, struct, datetime, subprocess
import numpy as np
import random as rand
import multiprocessing as mp


rate_size = 2
capacity_size = 14
block_size = 4
state_size = 16
blank_rounds = 6

s_box = (
	0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
	0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
	0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
	0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
	0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
	0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
	0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
	0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
	0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
	0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
	0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
	0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
	0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
	0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
	0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
	0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

inv_s_box = (
	0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
	0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
	0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
	0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
	0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
	0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
	0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
	0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
	0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
	0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
	0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
	0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
	0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
	0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
	0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)


def add_constant(s):
	for i in range(block_size):
		s[i][i] ^= 0xf1


def sub_bytes(s):
	for i in range(len(s)):
		for j in range(4):
			s[i][j] = s_box[s[i][j]]

def inv_sub_bytes(s):
	for i in range(4):
		for j in range(4):
			s[i][j] = inv_s_box[s[i][j]]

def shift_rows(s):
	s[0][1], s[1][1], s[2][1], s[3][1] = s[1][1], s[2][1], s[3][1], s[0][1]
	s[0][2], s[1][2], s[2][2], s[3][2] = s[2][2], s[3][2], s[0][2], s[1][2]
	s[0][3], s[1][3], s[2][3], s[3][3] = s[3][3], s[0][3], s[1][3], s[2][3]

def inv_shift_rows(s):
	s[0][1], s[1][1], s[2][1], s[3][1] = s[3][1], s[0][1], s[1][1], s[2][1]
	s[0][2], s[1][2], s[2][2], s[3][2] = s[2][2], s[3][2], s[0][2], s[1][2]
	s[0][3], s[1][3], s[2][3], s[3][3] = s[1][3], s[2][3], s[3][3], s[0][3]

xtime = lambda a: (((a << 1) ^ 0x1B) & 0xFF) if (a & 0x80) else (a << 1)

def mix_single_column(a):
	t = a[0] ^ a[1] ^ a[2] ^ a[3]
	u = a[0]
	a[0] ^= t ^ xtime(a[0] ^ a[1])
	a[1] ^= t ^ xtime(a[1] ^ a[2])
	a[2] ^= t ^ xtime(a[2] ^ a[3])
	a[3] ^= t ^ xtime(a[3] ^ u)

def mix_columns(s):
	for i in range(4):
		mix_single_column(s[i])

def inv_mix_single_column(a):
	u = xtime(xtime(a[0] ^ a[2]))
	v = xtime(xtime(a[1] ^ a[3]))
	a[0] ^= u
	a[1] ^= v
	a[2] ^= u
	a[3] ^= v
	mix_single_column(a)

def inv_mix_columns(s):
	for i in range(4):
		inv_mix_single_column(s[i])

def f(s):
	add_constant(s)
	sub_bytes(s)
	shift_rows(s)
	mix_columns(s)

def inv_f(s):
	inv_mix_columns(s)
	inv_shift_rows(s)
	inv_sub_bytes(s)
	add_constant(s)

def truncate(s):
	for i in range(4):
		s[i].pop() 

def cladorhizidae(msg):
	state = [[0 for _ in range(block_size)] for _ in range(state_size//block_size)]
	blocks = [[i for i in msg[j:j+rate_size]] for j in range(0, len(msg), rate_size)]
	for i in blocks:
		state[0][:rate_size] = i
		f(state)
	for _ in range(blank_rounds):
		f(state)
	truncate(state)
	return bytes(sum(state, []))
	
def hmac(key, message):
	 return cladorhizidae(key+message)

def partial(msg):
	state = [[0 for _ in range(block_size)] for _ in range(state_size//block_size)]
	blocks = [[i for i in msg[j:j+rate_size]] for j in range(0, len(msg), rate_size)]
	for i in blocks:
		state[0][:rate_size] = i
		f(state)
	for _ in range(blank_rounds):
		f(state)
	return state

# X = H(K || USER)
# Y = H(K || USER || M)
# exist one case where f(X) = Y
# we know trunc(X), trunc(Y), X = inv_f(Y)

def hashtobytes(X):
	ret = [[0] * 3 for i in range(4)]
	cur = 0
	for i in range(4):
		for j in range(3):
			ret[i][j] = X[cur]
			cur += 1
	return ret

def CALC(tX, tY):
	COMMON = [[0] * 4 for i in range(4)]
	for i in range(4):
		for j in range(3):
			if i != j:
				COMMON[i][j] = s_box[tX[i][j]]
			if i == j:
				COMMON[i][j] = s_box[tX[i][j] ^ 0xf1]
	shift_rows(COMMON)
	FF = [[0] * 4 for i in range(4)]
	for i in range(4):
		for j in range(3):
			FF[i][j] = tY[i][j]
	for i in range(4):
		found = False
		for j in range(256):
			FF[i][3] = j
			inv_mix_single_column(FF[i])
			isok = True
			for k in range(3):
				if FF[i][k] != COMMON[i][k]:
					isok = False
			if isok:
				found = True
				COMMON[i][3] = FF[i][3]
				break
			mix_single_column(FF[i])
		if found == False:
			return None
	mix_columns(COMMON)
	inv_f(COMMON)
	return COMMON

KEY = os.urandom(16)
ID = os.urandom(16)
MODE = 0
r = remote('cladorhizidae.pwn2win.party', 1337)

def getID():
	if MODE == 0:
		return bytes.fromhex(r.recvline().strip().decode().split()[-1])
	if MODE == 1:
		return ID

def gettoken():
	if MODE == 0:
		return bytes.fromhex(r.recvline().strip().decode().split()[-1])
	if MODE == 1:
		return cladorhizidae(KEY + ID)

def getquery(query):
	if MODE == 0:
		# r.sendline(query)
		getval = bytes.fromhex(r.recvline().strip().decode())
		return getval
	if MODE == 1:
		query = bytes.fromhex(query)
		return cladorhizidae(KEY + query)

user_ID = getID()
token = gettoken()

if MODE == 0:
	r.recvline()

WOW = None
found = False
for i in tqdm(range(256)):
	if found:
		break
	cc = ''
	for j in range(256):
		query = user_ID + bytes([i]) + bytes([j])
		query = query.hex()
		cc += query + "\n"
	r.send(cc)
	T = r.recvlines(256)
	for j in range(256):
		trunc_token = hashtobytes(token)
		query = user_ID + bytes([i]) + bytes([j])
		query = query.hex()
		getval = bytes.fromhex(T[j].decode())
		trunc_other = hashtobytes(getval)
		GG = CALC(trunc_token, trunc_other)
		if GG != None:
			WOW = GG
			found = True
			break

# WOW = f(K || USER_ID)

for i in range(blank_rounds):
	inv_f(WOW)

val = None
if MODE == 0:
	r.sendline("00")
	val = bytes.fromhex(r.recvline().strip().decode().split()[-1])
	val = val[16:]
if MODE == 1:
	val = ID + os.urandom(32)
	print(cladorhizidae(KEY + val))
	val = val[16:]
blocks = [[i for i in val[j:j+rate_size]] for j in range(0, len(val), rate_size)]
for i in blocks:
	WOW[0][:rate_size] = i
	f(WOW)
for i in range(blank_rounds):
	f(WOW)
truncate(WOW)
cc = bytes(sum(WOW, []))
if MODE == 0:
	r.sendline(cc.hex())
	print(r.recvline())
	print(r.recvline())
	print(r.recvline())
if MODE == 1:
	print(cc)